// Code generated by MockGen. DO NOT EDIT.
// Source: repository/interfaces.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepositoryInterface is a mock of RepositoryInterface interface.
type MockRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryInterfaceMockRecorder
}

// MockRepositoryInterfaceMockRecorder is the mock recorder for MockRepositoryInterface.
type MockRepositoryInterfaceMockRecorder struct {
	mock *MockRepositoryInterface
}

// NewMockRepositoryInterface creates a new mock instance.
func NewMockRepositoryInterface(ctrl *gomock.Controller) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryInterface) EXPECT() *MockRepositoryInterfaceMockRecorder {
	return m.recorder
}

// GetPasswordByPhoneNumber mocks base method.
func (m *MockRepositoryInterface) GetPasswordByPhoneNumber(ctx context.Context, input GetPasswordByPhoneNumberInput) (GetPasswordByPhoneNumberOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPasswordByPhoneNumber", ctx, input)
	ret0, _ := ret[0].(GetPasswordByPhoneNumberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPasswordByPhoneNumber indicates an expected call of GetPasswordByPhoneNumber.
func (mr *MockRepositoryInterfaceMockRecorder) GetPasswordByPhoneNumber(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPasswordByPhoneNumber", reflect.TypeOf((*MockRepositoryInterface)(nil).GetPasswordByPhoneNumber), ctx, input)
}

// GetUserDataById mocks base method.
func (m *MockRepositoryInterface) GetUserDataById(ctx context.Context, input GetUserDataByIdInput) (GetUserDataByIdOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDataById", ctx, input)
	ret0, _ := ret[0].(GetUserDataByIdOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDataById indicates an expected call of GetUserDataById.
func (mr *MockRepositoryInterfaceMockRecorder) GetUserDataById(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDataById", reflect.TypeOf((*MockRepositoryInterface)(nil).GetUserDataById), ctx, input)
}

// InsertNewUser mocks base method.
func (m *MockRepositoryInterface) InsertNewUser(ctx context.Context, input InsertNewUserInput) (InsertNewUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertNewUser", ctx, input)
	ret0, _ := ret[0].(InsertNewUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertNewUser indicates an expected call of InsertNewUser.
func (mr *MockRepositoryInterfaceMockRecorder) InsertNewUser(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertNewUser", reflect.TypeOf((*MockRepositoryInterface)(nil).InsertNewUser), ctx, input)
}

// UpdateTotalLoginById mocks base method.
func (m *MockRepositoryInterface) UpdateTotalLoginById(ctx context.Context, input UpdateTotalLoginByIdInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTotalLoginById", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTotalLoginById indicates an expected call of UpdateTotalLoginById.
func (mr *MockRepositoryInterfaceMockRecorder) UpdateTotalLoginById(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTotalLoginById", reflect.TypeOf((*MockRepositoryInterface)(nil).UpdateTotalLoginById), ctx, input)
}

// UpdateUserData mocks base method.
func (m *MockRepositoryInterface) UpdateUserData(ctx context.Context, input UpdateUserDataInput) (UpdateUserDataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserData", ctx, input)
	ret0, _ := ret[0].(UpdateUserDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserData indicates an expected call of UpdateUserData.
func (mr *MockRepositoryInterfaceMockRecorder) UpdateUserData(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserData", reflect.TypeOf((*MockRepositoryInterface)(nil).UpdateUserData), ctx, input)
}
